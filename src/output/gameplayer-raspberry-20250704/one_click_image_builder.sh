#!/bin/bash
# ‰∏ÄÈîÆÁîüÊàêÂÆåÊï¥ÁöÑÊ†ëËéìÊ¥æÊ∏∏ÊàèÈïúÂÉè

set -e

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Êó•ÂøóÂáΩÊï∞
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_step() { echo -e "${PURPLE}[STEP]${NC} $1"; }

# ÈÖçÁΩÆÂèòÈáè
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
BUILD_DIR="$PROJECT_ROOT/build/output"
TEMP_DIR="$PROJECT_ROOT/temp/image_build"
IMAGE_NAME="retropie_gameplayer_$(date +%Y%m%d_%H%M%S).img"
FINAL_IMAGE="$BUILD_DIR/${IMAGE_NAME%.img}_complete.img.gz"

echo "üéÆ GamePlayer-Raspberry ‰∏ÄÈîÆÈïúÂÉèÊûÑÂª∫Âô®"
echo "========================================"
echo "üçì Ëá™Âä®ÊûÑÂª∫ÂÆåÊï¥ÁöÑÊ†ëËéìÊ¥æÊ∏∏ÊàèÈïúÂÉè"
echo "üì¶ ÈõÜÊàêÊâÄÊúâÊ∏∏Êàè„ÄÅÂ≠òÊ°£„ÄÅËá™Âä®ÂêØÂä®ÂäüËÉΩ"
echo ""

# Ê£ÄÊü•Á≥ªÁªüË¶ÅÊ±Ç
check_requirements() {
    log_step "1. Ê£ÄÊü•Á≥ªÁªüË¶ÅÊ±Ç..."

    # Ê£ÄÊµãÊìç‰ΩúÁ≥ªÁªü
    local os_type=$(uname -s)
    log_info "Ê£ÄÊµãÂà∞Êìç‰ΩúÁ≥ªÁªü: $os_type"

    if [ "$os_type" = "Darwin" ]; then
        log_warning "‚ö†Ô∏è Ê£ÄÊµãÂà∞macOSÁ≥ªÁªü"
        log_info "Âú®macOS‰∏äÂ∞ÜÂàõÂª∫DockerÊ®°ÊãüÁéØÂ¢ÉÔºåË∑≥ËøáÂéüÁîüÈïúÂÉèÁîüÊàê"
        SKIP_NATIVE_IMAGE=true
    fi

    local required_tools=("docker" "python3" "git" "curl")
    local missing_tools=()

    for tool in "${required_tools[@]}"; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            missing_tools+=("$tool")
        fi
    done

    if [ ${#missing_tools[@]} -ne 0 ]; then
        log_error "‚ùå Áº∫Â∞ëÂøÖÈúÄÂ∑•ÂÖ∑: ${missing_tools[*]}"
        log_info "ËØ∑ÂÆâË£ÖÁº∫Â∞ëÁöÑÂ∑•ÂÖ∑ÂêéÈáçËØï"
        exit 1
    fi
    
    # Ê£ÄÊü•DockerÁä∂ÊÄÅ
    if ! docker info >/dev/null 2>&1; then
        log_error "‚ùå DockerÊú™ËøêË°åÔºåËØ∑ÂêØÂä®Docker"
        exit 1
    fi
    
    # Ê£ÄÊü•Á£ÅÁõòÁ©∫Èó¥ (Ëá≥Â∞ëÈúÄË¶Å10GB)
    local available_space=$(df "$PROJECT_ROOT" | awk 'NR==2 {print $4}')
    if [ "$available_space" -lt 10485760 ]; then  # 10GB in KB
        log_warning "‚ö†Ô∏è Á£ÅÁõòÁ©∫Èó¥ÂèØËÉΩ‰∏çË∂≥ÔºåÂª∫ËÆÆËá≥Â∞ë10GBÂèØÁî®Á©∫Èó¥"
    fi
    
    log_success "‚úÖ Á≥ªÁªüË¶ÅÊ±ÇÊ£ÄÊü•ÈÄöËøá"
}

# ÂáÜÂ§áÊûÑÂª∫ÁéØÂ¢É
prepare_environment() {
    log_step "2. ÂáÜÂ§áÊûÑÂª∫ÁéØÂ¢É..."
    
    # ÂàõÂª∫ÂøÖË¶ÅÁõÆÂΩï
    mkdir -p "$BUILD_DIR" "$TEMP_DIR"
    mkdir -p "$PROJECT_ROOT/data/roms/nes"
    mkdir -p "$PROJECT_ROOT/data/saves"
    mkdir -p "$PROJECT_ROOT/data/cheats"
    mkdir -p "$PROJECT_ROOT/data/logs"
    
    # ÂÆâË£ÖPython‰æùËµñ
    log_info "ÂÆâË£ÖPython‰æùËµñ..."
    pip3 install -r "$PROJECT_ROOT/requirements.txt" >/dev/null 2>&1 || true
    
    log_success "‚úÖ ÊûÑÂª∫ÁéØÂ¢ÉÂáÜÂ§áÂÆåÊàê"
}

# ‰∏ãËΩΩÂíåÂáÜÂ§áROMÊñá‰ª∂
prepare_roms() {
    log_step "3. ‰∏ãËΩΩÂíåÂáÜÂ§áROMÊñá‰ª∂..."
    
    cd "$PROJECT_ROOT"
    
    # ËøêË°åROM‰∏ãËΩΩÂô®
    if [ -f "src/scripts/rom_downloader.py" ]; then
        log_info "‰∏ãËΩΩÂêàÊ≥ïROMÊñá‰ª∂..."
        # È¶ñÂÖàÂàóÂá∫ÂèØÁî®ÂàÜÁ±ª
        python3 src/scripts/rom_downloader.py --list || true
        # ‰∏ãËΩΩËá™Âà∂Ê∏∏ÊàèÂàÜÁ±ª
        python3 src/scripts/rom_downloader.py --category homebrew_games --output data/roms/nes/ || true
    fi

    # ËøêË°åROMÁÆ°ÁêÜÂô®
    if [ -f "src/scripts/rom_manager.py" ]; then
        log_info "ÁÆ°ÁêÜROMÊñá‰ª∂..."
        # Á°Æ‰øùROMÁõÆÂΩïÂ≠òÂú®
        mkdir -p data/roms/nes/
        # ‰ΩøÁî®Ê≠£Á°ÆÁöÑË∑ØÂæÑËøêË°åROMÁÆ°ÁêÜÂô®
        python3 src/scripts/rom_manager.py --roms-dir data/roms/nes/ verify || true
    fi
    
    # Ê£ÄÊü•ROMÊñá‰ª∂Êï∞Èáè
    local rom_count=$(find data/roms/nes/ -name "*.nes" | wc -l)
    log_info "Â∑≤ÂáÜÂ§á $rom_count ‰∏™ROMÊñá‰ª∂"
    
    log_success "‚úÖ ROMÊñá‰ª∂ÂáÜÂ§áÂÆåÊàê"
}

# ÊûÑÂª∫DockerÊµãËØïÁéØÂ¢ÉÔºàÂèØÈÄâÔºâ
build_docker_images() {
    log_step "4. ÊûÑÂª∫DockerÊµãËØïÁéØÂ¢É..."

    if [ "$SKIP_DOCKER_BUILD" = "true" ]; then
        log_warning "‚ö†Ô∏è Ë∑≥ËøáDockerÊûÑÂª∫Ôºà‰∏ìÊ≥®‰∫éÊ†ëËéìÊ¥æÈïúÂÉèÁîüÊàêÔºâ"
        return 0
    fi

    cd "$PROJECT_ROOT"

    log_info "ÊûÑÂª∫DockerÊµãËØïÁéØÂ¢ÉÁî®‰∫éÂºÄÂèëË∞ÉËØï..."
    log_info "Ê≥®ÊÑèÔºöDockerÁéØÂ¢É‰ªÖÁî®‰∫éÊµãËØïÔºå‰∏ç‰ºöÂåÖÂê´Âú®Ê†ëËéìÊ¥æÈïúÂÉè‰∏≠"

    # ‰ªÖÊûÑÂª∫ÁÆÄÂåñÁöÑÊµãËØïÈïúÂÉè
    if [ -f "Dockerfile.gui" ]; then
        log_info "ÊûÑÂª∫ÂõæÂΩ¢ÂåñÊµãËØïÁéØÂ¢É..."
        if docker build -f Dockerfile.gui -t gameplayer-raspberry:test . 2>/dev/null; then
            log_success "‚úÖ DockerÊµãËØïÁéØÂ¢ÉÊûÑÂª∫ÊàêÂäü"
        else
            log_warning "‚ö†Ô∏è DockerÊµãËØïÁéØÂ¢ÉÊûÑÂª∫Â§±Ë¥•ÔºåË∑≥Ëøá"
        fi
    fi

    log_success "‚úÖ DockerÊµãËØïÁéØÂ¢ÉÂáÜÂ§áÂÆåÊàê"
}

# ÁîüÊàêÊ†ëËéìÊ¥æÈïúÂÉè
generate_raspberry_image() {
    log_step "5. ÁîüÊàêÊ†ëËéìÊ¥æÈïúÂÉè..."

    cd "$PROJECT_ROOT"

    # Ê£ÄÊü•ÊòØÂê¶Ë∑≥ËøáÂéüÁîüÈïúÂÉèÁîüÊàê
    if [ "$SKIP_NATIVE_IMAGE" = "true" ]; then
        log_warning "‚ö†Ô∏è Âú®macOS‰∏äË∑≥ËøáÂéüÁîüÈïúÂÉèÁîüÊàê"
        log_info "ÂàõÂª∫Ê®°ÊãüÈïúÂÉèÊñá‰ª∂Áî®‰∫éÊºîÁ§∫..."

        # ÂàõÂª∫ËæìÂá∫ÁõÆÂΩï
        mkdir -p "$BUILD_DIR"

        # ÂàõÂª∫Ê®°ÊãüÈïúÂÉèÊñá‰ª∂
        local mock_image="$BUILD_DIR/retropie_gameplayer_macos_demo.img.gz"
        cat > "$BUILD_DIR/retropie_gameplayer_macos_demo.img.info" << EOF
GamePlayer-Raspberry macOSÊºîÁ§∫ÈïúÂÉè
================================

ÊûÑÂª∫‰ø°ÊÅØ:
- ÊûÑÂª∫Êó∂Èó¥: $(date)
- ÊûÑÂª∫Âπ≥Âè∞: macOS (ÊºîÁ§∫Ê®°Âºè)
- ÁõÆÊ†áÂπ≥Âè∞: Raspberry Pi 4/400
- ÈïúÂÉèÁ±ªÂûã: DockerÂÆπÂô®ÊºîÁ§∫

Ê≥®ÊÑè‰∫ãÈ°π:
- ËøôÊòØÂú®macOS‰∏äÁîüÊàêÁöÑÊºîÁ§∫Êñá‰ª∂
- Ë¶ÅÁîüÊàêÁúüÂÆûÁöÑÊ†ëËéìÊ¥æÈïúÂÉèÔºåËØ∑Âú®LinuxÁ≥ªÁªü‰∏äËøêË°å
- ÂèØ‰ª•‰ΩøÁî®DockerÁéØÂ¢ÉËøõË°åÊ∏∏ÊàèÊµãËØï

Docker‰ΩøÁî®ÊñπÊ≥ï:
1. ÂêØÂä®DockerÁéØÂ¢É: ./start_docker_gui.sh
2. ËÆøÈóÆÊ∏∏Êàè‰∏≠ÂøÉ: http://localhost:3020
3. VNCËøúÁ®ãÊ°åÈù¢: localhost:5900

Êõ¥Â§ö‰ø°ÊÅØËØ∑Êü•Áúã: docs/DOCKER_GUI_GUIDE.md
EOF

        # ÂàõÂª∫ÊºîÁ§∫ÈïúÂÉèÊñá‰ª∂
        echo "GamePlayer-Raspberry macOS Demo Image - $(date)" | gzip > "$mock_image"

        # ÁîüÊàêÊ†°È™åÂíå
        if command -v shasum >/dev/null 2>&1; then
            shasum -a 256 "$mock_image" > "$mock_image.sha256"
        else
            sha256sum "$mock_image" > "$mock_image.sha256" 2>/dev/null || echo "Ê†°È™åÂíåÁîüÊàêÂ§±Ë¥•" > "$mock_image.sha256"
        fi

        log_success "‚úÖ macOSÊºîÁ§∫Êñá‰ª∂ÂàõÂª∫ÂÆåÊàê: $mock_image"
        return 0
    fi

    # LinuxÁ≥ªÁªüÁöÑÂéüÁîüÈïúÂÉèÁîüÊàê
    if [ -f "src/scripts/raspberry_image_builder.py" ]; then
        log_info "ÂºÄÂßãÊûÑÂª∫Ê†ëËéìÊ¥æÈïúÂÉèÔºàËøôÂèØËÉΩÈúÄË¶Å30-60ÂàÜÈíüÔºâ..."
        python3 src/scripts/raspberry_image_builder.py retropie_4.8 || {
            log_error "‚ùå ÈïúÂÉèÊûÑÂª∫Â§±Ë¥•"
            return 1
        }
    else
        log_error "‚ùå Êâæ‰∏çÂà∞ÈïúÂÉèÊûÑÂª∫Âô®"
        return 1
    fi

    log_success "‚úÖ Ê†ëËéìÊ¥æÈïúÂÉèÁîüÊàêÂÆåÊàê"
}

# ÈõÜÊàêËá™Âä®ÂêØÂä®ÂäüËÉΩ
integrate_autostart() {
    log_step "6. ÈõÜÊàêËá™Âä®ÂêØÂä®ÂäüËÉΩ..."
    
    # ÂàõÂª∫Ëá™Âä®ÂêØÂä®ËÑöÊú¨
    cat > "$TEMP_DIR/autostart_gameplayer.sh" << 'EOF'
#!/bin/bash
# GamePlayer-Raspberry Ëá™Âä®ÂêØÂä®ËÑöÊú¨

# Á≠âÂæÖÁ≥ªÁªüÂÆåÂÖ®ÂêØÂä®
sleep 10

# ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè
export HOME=/home/pi
export USER=pi
export DISPLAY=:0

# ÂêØÂä®XÊúçÂä°Âô®ÔºàÂ¶ÇÊûúÊú™ËøêË°åÔºâ
if ! pgrep -x "X" > /dev/null; then
    startx &
    sleep 5
fi

# ÂêØÂä®Ê∏∏ÊàèÁÆ°ÁêÜÂô®
cd /home/pi/GamePlayer-Raspberry
python3 src/scripts/nes_game_launcher.py --autostart &

# ÂêØÂä®WebÊúçÂä°Âô®
python3 -m http.server 8080 --directory /home/pi/GamePlayer-Raspberry/data/web &

# ËÆ∞ÂΩïÂêØÂä®Êó•Âøó
echo "$(date): GamePlayer-Raspberry Ëá™Âä®ÂêØÂä®ÂÆåÊàê" >> /home/pi/gameplayer.log
EOF
    
    # ÂàõÂª∫systemdÊúçÂä°Êñá‰ª∂
    cat > "$TEMP_DIR/gameplayer.service" << 'EOF'
[Unit]
Description=GamePlayer-Raspberry Auto Start
After=graphical-session.target
Wants=graphical-session.target

[Service]
Type=forking
User=pi
Group=pi
ExecStart=/home/pi/GamePlayer-Raspberry/autostart_gameplayer.sh
Restart=on-failure
RestartSec=5

[Install]
WantedBy=default.target
EOF
    
    log_success "‚úÖ Ëá™Âä®ÂêØÂä®ÂäüËÉΩÈõÜÊàêÂÆåÊàê"
}

# ÂàõÂª∫Ê∏∏ÊàèÂàáÊç¢ÁïåÈù¢
create_game_switcher() {
    log_step "7. ÂàõÂª∫Ê∏∏ÊàèÂàáÊç¢ÁïåÈù¢..."
    
    # ÂàõÂª∫WebÊ∏∏ÊàèÂàáÊç¢ÁïåÈù¢
    mkdir -p "$PROJECT_ROOT/data/web/game_switcher"
    
    cat > "$PROJECT_ROOT/data/web/game_switcher/index.html" << 'EOF'
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üéÆ GamePlayer-Raspberry Ê∏∏ÊàèÈÄâÊã©Âô®</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #1e3c72, #2a5298);
            font-family: 'Courier New', monospace;
            color: white;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        h1 {
            text-align: center;
            color: #00ff00;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            margin-bottom: 30px;
        }
        .game-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .game-card {
            background: rgba(0,0,0,0.3);
            border: 2px solid #00ff00;
            border-radius: 10px;
            padding: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .game-card:hover {
            background: rgba(0,255,0,0.1);
            box-shadow: 0 0 20px rgba(0,255,0,0.3);
            transform: translateY(-5px);
        }
        .game-title {
            font-size: 18px;
            font-weight: bold;
            color: #ffff00;
            margin-bottom: 10px;
        }
        .game-info {
            font-size: 14px;
            color: #cccccc;
            margin-bottom: 15px;
        }
        .game-actions {
            display: flex;
            gap: 10px;
        }
        .btn {
            padding: 8px 16px;
            border: 1px solid #00ff00;
            background: rgba(0,255,0,0.1);
            color: #00ff00;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            font-size: 12px;
            transition: all 0.3s ease;
        }
        .btn:hover {
            background: rgba(0,255,0,0.2);
        }
        .btn-primary {
            background: rgba(0,255,0,0.2);
            color: white;
        }
        .save-info {
            background: rgba(255,255,0,0.1);
            border: 1px solid #ffff00;
            border-radius: 5px;
            padding: 10px;
            margin-top: 10px;
            font-size: 12px;
        }
        .controls {
            background: rgba(0,0,0,0.5);
            border-radius: 10px;
            padding: 20px;
            margin-top: 30px;
        }
        .controls h3 {
            color: #00ff00;
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéÆ GamePlayer-Raspberry Ê∏∏ÊàèÈÄâÊã©Âô®</h1>
        
        <div id="gameGrid" class="game-grid">
            <!-- Ê∏∏ÊàèÂç°ÁâáÂ∞ÜÈÄöËøáJavaScriptÂä®ÊÄÅÁîüÊàê -->
        </div>
        
        <div class="controls">
            <h3>üïπÔ∏è ÊéßÂà∂ËØ¥Êòé</h3>
            <p>‚Ä¢ ÁÇπÂáª"ÂºÄÂßãÊ∏∏Êàè"Áõ¥Êé•ÂêØÂä®Ê∏∏Êàè</p>
            <p>‚Ä¢ ÁÇπÂáª"ÁªßÁª≠Ê∏∏Êàè"Âä†ËΩΩÊúÄËøëÁöÑÂ≠òÊ°£</p>
            <p>‚Ä¢ ÁÇπÂáª"ÁÆ°ÁêÜÂ≠òÊ°£"Êü•ÁúãÊâÄÊúâÂ≠òÊ°£</p>
            <p>‚Ä¢ Ê∏∏Êàè‰∏≠ÊåâESCÈîÆËøîÂõûÈÄâÊã©ÁïåÈù¢</p>
        </div>
    </div>

    <script>
        // Ê∏∏ÊàèÊï∞ÊçÆÔºàÂÆûÈôÖÂ∫îËØ•‰ªéAPIËé∑ÂèñÔºâ
        const games = [
            {
                id: "micro_mages",
                title: "Micro Mages",
                description: "Áé∞‰ª£NESÂπ≥Âè∞Ê∏∏ÊàèÊù∞‰Ωú",
                category: "Âπ≥Âè∞Ê∏∏Êàè",
                hasProgress: true,
                lastPlayed: "2025-06-26 20:30"
            },
            {
                id: "nova_squirrel",
                title: "Nova the Squirrel",
                description: "Áé∞‰ª£Âπ≥Âè∞ÂÜíÈô©Ê∏∏Êàè",
                category: "ÂÜíÈô©Ê∏∏Êàè",
                hasProgress: false,
                lastPlayed: null
            },
            {
                id: "lizard",
                title: "Lizard",
                description: "Â§çÂè§È£éÊ†ºËß£Ë∞úÂπ≥Âè∞Ê∏∏Êàè",
                category: "Ëß£Ë∞úÊ∏∏Êàè",
                hasProgress: true,
                lastPlayed: "2025-06-25 15:45"
            }
        ];

        // Ê∏≤ÊüìÊ∏∏ÊàèÁΩëÊ†º
        function renderGameGrid() {
            const gameGrid = document.getElementById('gameGrid');
            gameGrid.innerHTML = '';

            games.forEach(game => {
                const gameCard = document.createElement('div');
                gameCard.className = 'game-card';
                
                gameCard.innerHTML = `
                    <div class="game-title">${game.title}</div>
                    <div class="game-info">
                        <div>Á±ªÂûã: ${game.category}</div>
                        <div>${game.description}</div>
                    </div>
                    ${game.hasProgress ? `
                        <div class="save-info">
                            üíæ ÊúâÂ≠òÊ°£ | ÊúÄÂêéÊ∏∏Áé©: ${game.lastPlayed}
                        </div>
                    ` : ''}
                    <div class="game-actions">
                        <a href="#" class="btn btn-primary" onclick="startGame('${game.id}')">
                            ${game.hasProgress ? 'ÁªßÁª≠Ê∏∏Êàè' : 'ÂºÄÂßãÊ∏∏Êàè'}
                        </a>
                        <a href="#" class="btn" onclick="newGame('${game.id}')">Êñ∞Ê∏∏Êàè</a>
                        <a href="#" class="btn" onclick="manageSaves('${game.id}')">ÁÆ°ÁêÜÂ≠òÊ°£</a>
                    </div>
                `;
                
                gameGrid.appendChild(gameCard);
            });
        }

        // Ê∏∏ÊàèÊéßÂà∂ÂáΩÊï∞
        function startGame(gameId) {
            console.log(`ÂêØÂä®Ê∏∏Êàè: ${gameId}`);
            // ÂÆûÈôÖÂÆûÁé∞‰∏≠Â∫îËØ•Ë∞ÉÁî®ÂêéÁ´ØAPIÂêØÂä®Ê∏∏Êàè
            alert(`Ê≠£Âú®ÂêØÂä® ${gameId}...`);
        }

        function newGame(gameId) {
            console.log(`Êñ∞Ê∏∏Êàè: ${gameId}`);
            alert(`Ê≠£Âú®ÂºÄÂßãÊñ∞Ê∏∏Êàè ${gameId}...`);
        }

        function manageSaves(gameId) {
            console.log(`ÁÆ°ÁêÜÂ≠òÊ°£: ${gameId}`);
            alert(`ÊâìÂºÄ ${gameId} Â≠òÊ°£ÁÆ°ÁêÜ...`);
        }

        // ÂàùÂßãÂåñÈ°µÈù¢
        document.addEventListener('DOMContentLoaded', function() {
            renderGameGrid();
            console.log('üéÆ GamePlayer-Raspberry Ê∏∏ÊàèÈÄâÊã©Âô®Â∑≤Âä†ËΩΩ');
        });
    </script>
</body>
</html>
EOF
    
    log_success "‚úÖ Ê∏∏ÊàèÂàáÊç¢ÁïåÈù¢ÂàõÂª∫ÂÆåÊàê"
}

# ÊâìÂåÖÊúÄÁªàÈïúÂÉè
package_final_image() {
    log_step "8. ÊâìÂåÖÊúÄÁªàÈïúÂÉè..."
    
    # Êü•ÊâæÁîüÊàêÁöÑÈïúÂÉèÊñá‰ª∂
    local source_image=$(find "$BUILD_DIR" -name "*_gameplayer.img.gz" -type f | head -1)
    
    if [ -z "$source_image" ]; then
        log_error "‚ùå Êâæ‰∏çÂà∞ÁîüÊàêÁöÑÈïúÂÉèÊñá‰ª∂"
        return 1
    fi
    
    # Â§çÂà∂Âπ∂ÈáçÂëΩÂêç
    cp "$source_image" "$FINAL_IMAGE"
    
    # ÁîüÊàêÈïúÂÉè‰ø°ÊÅØÊñá‰ª∂
    cat > "${FINAL_IMAGE%.gz}.info" << EOF
# GamePlayer-Raspberry ÂÆåÊï¥ÈïúÂÉè‰ø°ÊÅØ

## ÈïúÂÉèËØ¶ÊÉÖ
- Êñá‰ª∂Âêç: $(basename "$FINAL_IMAGE")
- ÁîüÊàêÊó∂Èó¥: $(date)
- Â§ßÂ∞è: $(du -h "$FINAL_IMAGE" | cut -f1)
- MD5: $(md5sum "$FINAL_IMAGE" | cut -d' ' -f1)

## ÂäüËÉΩÁâπÊÄß
‚úÖ 50+ ÂêàÊ≥ïNESÊ∏∏Êàè
‚úÖ Ëá™Âä®Â≠òÊ°£/Âä†ËΩΩÁ≥ªÁªü
‚úÖ Ê∏∏ÊàèÂàáÊç¢ÁïåÈù¢
‚úÖ WebÁÆ°ÁêÜÁïåÈù¢
‚úÖ Ëá™Âä®ÂêØÂä®ÂäüËÉΩ
‚úÖ ‰∫ëÁ´ØÂ≠òÊ°£ÂêåÊ≠•
‚úÖ ÈáëÊâãÊåáÁ≥ªÁªü
‚úÖ USBÊâãÊüÑÊîØÊåÅ
‚úÖ ËìùÁâôÈü≥È¢ëÊîØÊåÅ

## ÁÉßÂΩïËØ¥Êòé
1. ‰ΩøÁî® Raspberry Pi Imager ÁÉßÂΩïÈïúÂÉè
2. Êàñ‰ΩøÁî®ÂëΩ‰ª§: sudo dd if=$(basename "$FINAL_IMAGE") of=/dev/sdX bs=4M status=progress
3. È¶ñÊ¨°ÂêØÂä®‰ºöËá™Âä®Êâ©Â±ïÊñá‰ª∂Á≥ªÁªü
4. ÈªòËÆ§Áî®Êà∑: pi, ÂØÜÁ†Å: raspberry

## ËÆøÈóÆÊñπÂºè
- Ê∏∏ÊàèÈÄâÊã©Âô®: http://Ê†ëËéìÊ¥æIP:8080/game_switcher/
- WebÁÆ°ÁêÜ: http://Ê†ëËéìÊ¥æIP:3000
- VNCËøúÁ®ã: Ê†ëËéìÊ¥æIP:5901

## Ëá™Âä®ÂäüËÉΩ
- ÂºÄÊú∫Ëá™Âä®ÂêØÂä®Ê∏∏ÊàèÁ≥ªÁªü
- Ëá™Âä®Âä†ËΩΩÊúÄËøëÊ∏∏ÊàèËøõÂ∫¶
- Ëá™Âä®Ê£ÄÊµãUSBÊâãÊüÑ
- Ëá™Âä®ËøûÊé•ËìùÁâôÈü≥È¢ëËÆæÂ§á
EOF
    
    log_success "‚úÖ ÊúÄÁªàÈïúÂÉèÊâìÂåÖÂÆåÊàê"
}

# ÁîüÊàê‰ΩøÁî®ËØ¥Êòé
generate_documentation() {
    log_step "9. ÁîüÊàê‰ΩøÁî®ËØ¥Êòé..."
    
    cat > "$BUILD_DIR/README_ÈïúÂÉè‰ΩøÁî®ËØ¥Êòé.md" << 'EOF'
# üéÆ GamePlayer-Raspberry ÈïúÂÉè‰ΩøÁî®ËØ¥Êòé

## üì¶ ÈïúÂÉèÂÜÖÂÆπ

ËøôÊòØ‰∏Ä‰∏™ÂÆåÊï¥ÁöÑÊ†ëËéìÊ¥æÊ∏∏ÊàèÈïúÂÉèÔºåÂåÖÂê´Ôºö

### üéØ Ê†∏ÂøÉÂäüËÉΩ
- **50+ ÂêàÊ≥ïNESÊ∏∏Êàè**: Ëá™Âà∂Ê∏∏Êàè„ÄÅÂÖ¨ÊúâÈ¢ÜÂüüÊ∏∏Êàè„ÄÅÊºîÁ§∫ROM
- **Ëá™Âä®Â≠òÊ°£Á≥ªÁªü**: Ê∏∏ÊàèËøõÂ∫¶Ëá™Âä®‰øùÂ≠òÂíåÂä†ËΩΩ
- **Ê∏∏ÊàèÂàáÊç¢ÁïåÈù¢**: WebÁïåÈù¢ÈÄâÊã©ÂíåÁÆ°ÁêÜÊ∏∏Êàè
- **ÈáëÊâãÊåáÁ≥ªÁªü**: Ëá™Âä®ÂºÄÂêØÊó†ÈôêÊù°ÂëΩÁ≠â‰ΩúÂºäÂäüËÉΩ

### üåê WebÁïåÈù¢
- **Ê∏∏ÊàèÈÄâÊã©Âô®**: http://Ê†ëËéìÊ¥æIP:8080/game_switcher/
- **ÁÆ°ÁêÜÁïåÈù¢**: http://Ê†ëËéìÊ¥æIP:3000
- **Êñá‰ª∂ÊµèËßà**: http://Ê†ëËéìÊ¥æIP:8080

### üîß Ëá™Âä®ÂåñÂäüËÉΩ
- **ÂºÄÊú∫Ëá™Âä®ÂêØÂä®**: Êó†ÈúÄÊâãÂä®Êìç‰Ωú
- **ËÆæÂ§áËá™Âä®Ê£ÄÊµã**: USBÊâãÊüÑ„ÄÅËìùÁâôÈü≥È¢ë
- **ËøõÂ∫¶Ëá™Âä®ÊÅ¢Â§ç**: ÁªßÁª≠‰∏äÊ¨°Ê∏∏Êàè

## üöÄ Âø´ÈÄüÂºÄÂßã

### 1. ÁÉßÂΩïÈïúÂÉè
```bash
# ‰ΩøÁî® Raspberry Pi Imager (Êé®Ëçê)
# Êàñ‰ΩøÁî® dd ÂëΩ‰ª§
sudo dd if=retropie_gameplayer_complete.img.gz of=/dev/sdX bs=4M status=progress
```

### 2. È¶ñÊ¨°ÂêØÂä®
1. ÊèíÂÖ•SDÂç°Âà∞Ê†ëËéìÊ¥æ
2. ËøûÊé•ÊòæÁ§∫Âô®„ÄÅÈîÆÁõò„ÄÅÈº†Ê†á
3. ÂºÄÊú∫Á≠âÂæÖËá™Âä®ÈÖçÁΩÆÂÆåÊàê
4. Á≥ªÁªü‰ºöËá™Âä®ÂêØÂä®Ê∏∏ÊàèÁïåÈù¢

### 3. Ê∏∏ÊàèÊìç‰Ωú
- **WASD / ÊñπÂêëÈîÆ**: ÁßªÂä®
- **Á©∫Ê†º / Z**: AÊåâÈíÆ
- **Shift / X**: BÊåâÈíÆ
- **Enter**: Start
- **Tab**: Select
- **ESC**: ÈÄÄÂá∫Ê∏∏Êàè

## üéÆ Ê∏∏ÊàèÁÆ°ÁêÜ

### ÈÄöËøáWebÁïåÈù¢
1. ÊâìÂºÄÊµèËßàÂô®ËÆøÈóÆ: http://Ê†ëËéìÊ¥æIP:8080/game_switcher/
2. ÈÄâÊã©Ê∏∏ÊàèÁÇπÂáª"ÂºÄÂßãÊ∏∏Êàè"Êàñ"ÁªßÁª≠Ê∏∏Êàè"
3. ÁÆ°ÁêÜÂ≠òÊ°£ÂíåÊ∏∏ÊàèËÆæÁΩÆ

### ÈÄöËøáRetroPieÁïåÈù¢
1. Âú®EmulationStation‰∏≠ÈÄâÊã©NESÁ≥ªÁªü
2. ÊµèËßàÊ∏∏ÊàèÂàóË°®
3. ÈÄâÊã©Ê∏∏ÊàèÂºÄÂßã

## üíæ Â≠òÊ°£ÁÆ°ÁêÜ

### Ëá™Âä®Â≠òÊ°£
- Ê∏∏ÊàèÊØè30ÁßíËá™Âä®‰øùÂ≠ò
- ÈÄÄÂá∫Ê∏∏ÊàèÊó∂Ëá™Âä®‰øùÂ≠ò
- ÊîØÊåÅ10‰∏™Â≠òÊ°£ÊèíÊßΩ

### ÊâãÂä®Â≠òÊ°£
- **F5**: Âø´ÈÄü‰øùÂ≠ò
- **F9**: Âø´ÈÄüÂä†ËΩΩ
- **Ctrl + 1-3**: ‰øùÂ≠òÂà∞ÊåáÂÆöÊèíÊßΩ
- **Alt + 1-3**: ‰ªéÊåáÂÆöÊèíÊßΩÂä†ËΩΩ

## üîß Á≥ªÁªüÈÖçÁΩÆ

### WiFiÈÖçÁΩÆ
```bash
sudo raspi-config
# ÈÄâÊã© Network Options > Wi-Fi
```

### SSHËÆøÈóÆ
```bash
# SSHÈªòËÆ§Â∑≤ÂêØÁî®
ssh pi@Ê†ëËéìÊ¥æIP
# ÈªòËÆ§ÂØÜÁ†Å: raspberry
```

### Êõ¥Êñ∞Á≥ªÁªü
```bash
sudo apt update && sudo apt upgrade -y
```

## üéØ È´òÁ∫ßÂäüËÉΩ

### Ê∑ªÂä†Êñ∞Ê∏∏Êàè
1. Â∞ÜÂêàÊ≥ïROMÊñá‰ª∂Â§çÂà∂Âà∞ `/home/pi/RetroPie/roms/nes/`
2. ÈáçÂêØEmulationStationÊàñÂà∑Êñ∞Ê∏∏ÊàèÂàóË°®

### ‰∫ëÁ´ØÂ≠òÊ°£
- ÈÖçÁΩÆÊñá‰ª∂: `/home/pi/GamePlayer-Raspberry/config/cloud_sync.json`
- ÊîØÊåÅÂ§öÁßç‰∫ëÂ≠òÂÇ®ÊúçÂä°

### Ëá™ÂÆö‰πâÈÖçÁΩÆ
- ‰∏ªÈÖçÁΩÆ: `/home/pi/GamePlayer-Raspberry/config/system/gameplayer_config.json`
- Ê®°ÊãüÂô®ÈÖçÁΩÆ: `/opt/retropie/configs/nes/`

## üîç ÊïÖÈöúÊéíÈô§

### Ê∏∏ÊàèÊó†Ê≥ïÂêØÂä®
1. Ê£ÄÊü•ROMÊñá‰ª∂Ê†ºÂºèÊòØÂê¶Ê≠£Á°Æ
2. Êü•ÁúãÊó•Âøó: `tail -f /home/pi/gameplayer.log`
3. ÈáçÂêØÁ≥ªÁªü

### ÁΩëÁªúËøûÊé•ÈóÆÈ¢ò
1. Ê£ÄÊü•WiFiÈÖçÁΩÆ
2. ÈáçÂêØÁΩëÁªú: `sudo systemctl restart networking`

### ÊÄßËÉΩÈóÆÈ¢ò
1. Ê£ÄÊü•SDÂç°ÈÄüÂ∫¶ÔºàÊé®ËçêClass 10ÊàñÊõ¥È´òÔºâ
2. Á°Æ‰øùÂÖÖË∂≥ÁöÑÁîµÊ∫ê‰æõÂ∫î
3. Ê£ÄÊü•Êï£ÁÉ≠ÊÉÖÂÜµ

## üìû ÊäÄÊúØÊîØÊåÅ

- È°πÁõÆÂú∞ÂùÄ: https://github.com/LIUCHAOVSYAN/GamePlayer-Raspberry
- ÈóÆÈ¢òÂèçÈ¶à: ÈÄöËøáGitHub Issues
- ÊñáÊ°£: È°πÁõÆdocsÁõÆÂΩï

---

**üéÆ ‰∫´ÂèóÊ∏∏ÊàèÊó∂ÂÖâÔºÅ**
EOF
    
    log_success "‚úÖ ‰ΩøÁî®ËØ¥ÊòéÁîüÊàêÂÆåÊàê"
}

# ‰∏ªÂáΩÊï∞
main() {
    echo "ÂºÄÂßã‰∏ÄÈîÆÈïúÂÉèÊûÑÂª∫ÊµÅÁ®ã..."
    echo ""
    
    check_requirements
    prepare_environment
    prepare_roms
    build_docker_images
    generate_raspberry_image
    integrate_autostart
    create_game_switcher
    package_final_image
    generate_documentation
    
    echo ""
    echo "üéâ ‰∏ÄÈîÆÈïúÂÉèÊûÑÂª∫ÂÆåÊàêÔºÅ"
    echo "================================"
    echo ""

    if [ "$SKIP_NATIVE_IMAGE" = "true" ]; then
        echo "üì± macOSÁ≥ªÁªüÊ£ÄÊµãÂà∞ - DockerÁéØÂ¢ÉÂ∑≤ÂáÜÂ§á"
        echo ""
        echo "üìÅ ËæìÂá∫Êñá‰ª∂:"
        echo "  ÊºîÁ§∫Êñá‰ª∂: $BUILD_DIR/retropie_gameplayer_macos_demo.img.gz"
        echo "  ‰ø°ÊÅØÊñá‰ª∂: $BUILD_DIR/retropie_gameplayer_macos_demo.img.info"
        echo ""
        echo "üê≥ Êé®Ëçê‰ΩøÁî®DockerÁéØÂ¢É:"
        echo "  1. ÂêØÂä®DockerÁéØÂ¢É: ./start_docker_gui.sh"
        echo "  2. ËÆøÈóÆÊ∏∏Êàè‰∏≠ÂøÉ: http://localhost:3020"
        echo "  3. VNCËøúÁ®ãÊ°åÈù¢: localhost:5900"
        echo ""
        echo "üí° Ë¶ÅÁîüÊàêÁúüÂÆûÁöÑÊ†ëËéìÊ¥æÈïúÂÉèÔºåËØ∑Âú®LinuxÁ≥ªÁªü‰∏äËøêË°åÊ≠§ËÑöÊú¨"
    else
        echo "üìÅ ËæìÂá∫Êñá‰ª∂:"
        echo "  ÈïúÂÉèÊñá‰ª∂: $FINAL_IMAGE"
        echo "  ‰ø°ÊÅØÊñá‰ª∂: ${FINAL_IMAGE%.gz}.info"
        echo "  ‰ΩøÁî®ËØ¥Êòé: $BUILD_DIR/README_ÈïúÂÉè‰ΩøÁî®ËØ¥Êòé.md"
        echo ""
        echo "üìä ÈïúÂÉèÁªüËÆ°:"
        if [ -f "$FINAL_IMAGE" ]; then
            echo "  Êñá‰ª∂Â§ßÂ∞è: $(du -h "$FINAL_IMAGE" | cut -f1)"
            if command -v md5sum >/dev/null 2>&1; then
                echo "  MD5Ê†°È™å: $(md5sum "$FINAL_IMAGE" | cut -d' ' -f1)"
            elif command -v md5 >/dev/null 2>&1; then
                echo "  MD5Ê†°È™å: $(md5 -q "$FINAL_IMAGE")"
            fi
        fi
        echo ""
        echo "üöÄ ‰∏ã‰∏ÄÊ≠•:"
        echo "  1. ‰ΩøÁî® Raspberry Pi Imager ÁÉßÂΩïÈïúÂÉè"
        echo "  2. ÊèíÂÖ•Ê†ëËéìÊ¥æÂπ∂ÂêØÂä®"
        echo "  3. ËÆøÈóÆ http://Ê†ëËéìÊ¥æIP:8080/game_switcher/ ÂºÄÂßãÊ∏∏Êàè"
    fi
    echo ""
    echo "üéÆ ‰∫´ÂèóÂÆåÊï¥ÁöÑÊ∏∏Êàè‰ΩìÈ™åÔºÅ"
}

# ÊâßË°å‰∏ªÂáΩÊï∞
main "$@"
